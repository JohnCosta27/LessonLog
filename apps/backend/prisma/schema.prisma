// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Students {
  id            String          @id @default(uuid())
  name          String
  startDate     DateTime        @db.Timestamp()
  lessons       Lessons[]
  hourBanks     HourBanks[]
  studentPrices StudentPrices[]
}

model Lessons {
  id         String     @id @default(uuid())
  studentId  String
  student    Students   @relation(fields: [studentId], references: [id])
  date       DateTime   @db.Timestamp()
  price      Float
  paid       Boolean    @default(false)
  duration   Float
  // Nullable foreign key
  hourBankId String?
  hourBank   HourBanks? @relation(fields: [hourBankId], references: [id])
  summary    String?
}

// This is where hours of any kind are stores.
// Some parents pay ahead of time with a bank of lessons,
// others pay in the moment.

model HourBanks {
  id             String        @id @default(uuid())
  studentId      String
  student        Students      @relation(fields: [studentId], references: [id])
  date           DateTime      @db.Timestamp()
  hours          Float
  // Denormalised, it's just easier to check this value than to count foreign keys.
  hoursLeft      Float
  // This starts the same as hours, this would be done in API.
  lessons        Lessons[]
  // The price that this hour bank relates to
  studentPriceId String
  studentPrice   StudentPrices @relation(fields: [studentPriceId], references: [id])
}

model StudentPrices {
  id        String      @id @default(uuid())
  studentId String
  student   Students    @relation(fields: [studentId], references: [id])
  price     Float       @db.Real
  date      DateTime    @default(now()) @db.Timestamp()
  hourBanks HourBanks[]
}
